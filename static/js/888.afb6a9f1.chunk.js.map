{"version":3,"file":"static/js/888.afb6a9f1.chunk.js","mappings":"+PAgBA,EAdkB,SAAC,GAAuC,IAArCA,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAC9BC,EAAG,yCAAqCD,GAExCE,EAA4B,OAAjBF,EAAwBC,EAAME,EAAQ,KAEvD,OACE,4BACE,gBAAKC,IAAKF,EAAUG,IAAKP,EAAMQ,OAAO,MAAMC,MAAM,SAClD,uBAAIT,KACJ,uBAAIC,MAGT,ECgCD,EAzCa,WACX,IAAQS,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,SAArC,eAAOG,EAAP,KAAeC,EAAf,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,6GAEYC,EAAAA,EAAAA,QAAYT,GAFxB,OAERU,EAFQ,OAGdN,EAAQM,GACRJ,EAAU,UAJI,gDAMdK,QAAQC,IAAR,MANc,yDAAH,qDASfJ,GACD,GAAE,CAACR,IAGS,WAAXK,IACE,yBACGF,EAAKU,OAAS,GACb,wBACGV,EAAKW,KAAI,gBAAGvB,EAAH,EAAGA,UAAWD,EAAd,EAAcA,KAAMyB,EAApB,EAAoBA,GAAIvB,EAAxB,EAAwBA,aAAxB,OACR,yBACE,SAAC,EAAD,CACEF,KAAMA,EACNC,UAAWA,EACXC,aAAcA,KAJTuB,EADD,OAWZ,8DAKT,C,8OC1CKC,GAAAA,EAAAA,EAAAA,IAAAA,SAAAA,IAAAA,IAAAA,EAAAA,MAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,OAAAA,eAAAA,KAAAA,EAAAA,CAAAA,UAAAA,EAAAA,MACG,kFACI,qFACF,uEACE,2DACA,6DACA,6DACD,sBAEVC,OAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAQ,oGACiBC,EAAAA,EAAAA,IAAA,kBAClB,EADkB,sBACN,EADM,kCACiB,EADjB,QADjB,cACAC,EADA,yBAICA,EAASC,KAAKC,SAJf,gDAORC,QAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAU,WAAMtB,GAAN,uFACekB,EAAAA,EAAAA,IAAA,kBAClB,EADkB,sBACN,EADM,cACUlB,EADV,4BAC6B,EAD7B,QADf,cACFmB,EADE,yBAIDA,EAASC,MAJR,8FAAVE,GAAU,KAOVC,QAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAU,WAAMvB,GAAN,uFACekB,EAAAA,EAAAA,IAAA,kBAClB,EADkB,sBACN,EADM,cACUlB,GADV,eACoB,EADpB,kCAEnB,EAFmB,QADf,cACFmB,EADE,yBAMDA,EAASC,KAAKjB,MANb,8FAAVoB,GAAU,KASVC,QAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAU,WAAMxB,GAAN,uFACekB,EAAAA,EAAAA,IAAA,kBAClB,EADkB,sBACN,EADM,cACUlB,GADV,eACoB,EADpB,kCAEnB,EAFmB,QADf,cACFmB,EADE,yBAODA,EAASC,KAAKC,SAPb,8FAAVG,GAAU,KAUVC,OAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAS,WAAMC,GAAN,uFACgBR,EAAAA,EAAAA,IAAA,kBAClB,EADkB,sBACN,EADM,kCACkB,EADlB,wBACyCQ,IAFzD,cACDP,EADC,yBAKAA,EAASC,KAAKC,SALd,8FAATI,EAAS,IASLhB,EAAM,IAAIO,EAChB,K","sources":["components/Character/Character.jsx","components/Cast/Cast.jsx","services/moviesAPI.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\n\nconst Character = ({ name, character, profile_path }) => {\n  const img = `https://image.tmdb.org/t/p/w500${profile_path}`;\n\n  const imageUrl = profile_path !== null ? img : require('./default-img.jpg');\n\n  return (\n    <div>\n      <img src={imageUrl} alt={name} height=\"150\" width=\"100\" />\n      <p>{name}</p>\n      <p>{character}</p>\n    </div>\n  );\n};\n\nexport default Character;\n\nCharacter.propTypes = {\n  name: PropTypes.string.isRequired,\n  character: PropTypes.string.isRequired,\n  profile_path: PropTypes.string,\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport API from 'services/moviesAPI';\nimport Character from 'components/Character/Character';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [status, setStatus] = useState('fetch');\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const castContent = await API.credits(movieId);\n        setCast(castContent);\n        setStatus('finish');\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    status === 'finish' && (\n      <div>\n        {cast.length > 0 ? (\n          <ul>\n            {cast.map(({ character, name, id, profile_path }) => (\n              <li key={id}>\n                <Character\n                  name={name}\n                  character={character}\n                  profile_path={profile_path}\n                />\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p>We don't have cast for this movie</p>\n        )}\n      </div>\n    )\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nclass fetchApi {\n  #URL = 'https://api.themoviedb.org/3/';\n  #API_KEY = 'd9b22b66e437cf83ab7d8ce61de5c8ef';\n  #TRAND = 'trending/movie/day';\n  #DETAILS = 'movie/';\n  #CREDITS = '/credits';\n  #REVIEWS = '/reviews';\n  #SEARCH = 'search/movie';\n\n  trand = async () => {\n    const response = await axios.get(\n      `${this.#URL}${this.#TRAND}?api_key=${this.#API_KEY}`\n    );\n    return response.data.results;\n  };\n\n  details = async movieId => {\n    const response = await axios.get(\n      `${this.#URL}${this.#DETAILS}${movieId}?api_key=${this.#API_KEY}`\n    );\n    return response.data;\n  };\n\n  credits = async movieId => {\n    const response = await axios.get(\n      `${this.#URL}${this.#DETAILS}${movieId}${this.#CREDITS}?api_key=${\n        this.#API_KEY\n      }`\n    );\n    return response.data.cast;\n  };\n\n  reviews = async movieId => {\n    const response = await axios.get(\n      `${this.#URL}${this.#DETAILS}${movieId}${this.#REVIEWS}?api_key=${\n        this.#API_KEY\n      }`\n    );\n\n    return response.data.results;\n  };\n\n  search = async movieName => {\n    const response = await axios.get(\n      `${this.#URL}${this.#SEARCH}?api_key=${this.#API_KEY}&query=${movieName}`\n    );\n    \n    return response.data.results\n  };\n}\n\nconst API = new fetchApi();\nexport default API;\n"],"names":["name","character","profile_path","img","imageUrl","require","src","alt","height","width","movieId","useParams","useState","cast","setCast","status","setStatus","useEffect","fetchCast","API","castContent","console","log","length","map","id","fetchApi","trand","axios","response","data","results","details","credits","reviews","search","movieName"],"sourceRoot":""}